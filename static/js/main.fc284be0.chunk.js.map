{"version":3,"sources":["components/Graph/LineGraph.module.css","api/index.js","components/InfoBox/InfoBox.js","components/Map/util.js","components/Map/Map.js","components/Table/Table.js","components/Graph/LineGraph.js","format.js","App.js","index.js","components/Table/Table.module.css"],"names":["module","exports","getCountriesData","a","axios","get","data","modifiedCountry","map","item","country","value","countryInfo","iso2","cases","deaths","recovered","console","log","getCountryInfo","countryCode","url","getHistoricalData","InfoBox","title","active1","active2","active3","isBlue","isGreen","isRed","total","props","Card","onClick","className","CardContent","Typography","color","variant","casesTypeColors","rgb","multiplier","showDataOnMap","caseTypes","index","Circle","center","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","Map","countries","zoom","scrollWheelZoom","TileLayer","attribution","Table","styles","tableContainer","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildLineChart","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetchHistoricalData","graphContainer","length","datasets","backgroundColor","borderColor","formatNumber","stat","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseTypes","updateDate","setUpdateDate","response","updated","fetchCountryInfo","tableList","sortedList","sort","b","fetchCountriesData","moment","FormControl","Select","onChange","event","target","then","MenuItem","i","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc284be0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"graphContainer\":\"LineGraph_graphContainer__PAJZ0\"};","import axios from \"axios\";\n\nexport const getCountriesData = async () => {\n  const url = \"https://disease.sh/v3/covid-19/countries\";\n\n  try {\n    const { data } = await axios.get(url);\n    const modifiedCountry = data.map((item) => ({\n      country: item.country,\n      value: item.countryInfo.iso2,\n      cases: item.cases,\n      deaths: item.deaths,\n      recovered: item.recovered,\n      countryInfo: item.countryInfo,\n    }));\n    return modifiedCountry;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getCountryInfo = async (countryCode) => {\n  const url =\n    countryCode === \"worldwide\"\n      ? \"https://disease.sh/v3/covid-19/all\"\n      : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getHistoricalData = async () => {\n  const url = \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\";\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({\n  title,\n  cases,\n  active1,\n  active2,\n  active3,\n  isBlue,\n  isGreen,\n  isRed,\n  total,\n  ...props\n}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active1 && \"infoBox--infected\"} ${\n        active2 && \"infoBox-recoverd\"\n      } ${active3 && \"infoBox-deaths\"}`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n\n        <Typography\n          className={`infoBox_cases ${isBlue && \"infoBox_infected\"} ${\n            isGreen && \"infoBox_recovered\"\n          } ${isRed && \"infoBox_deaths\"}`}\n          variant=\"h4\"\n        >\n          {cases}\n        </Typography>\n\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport \"./Map.css\";\n\nconst casesTypeColors = {\n  cases: {\n    rgb: \"rgb(0, 0, 255, 0.7)\",\n    multiplier: 800,\n  },\n  recovered: {\n    rgb: \"rgb(0, 255, 0, 0.7)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    rgb: \"rgb(255, 0, 0, 0.7)\",\n    multiplier: 2000,\n  },\n};\n\nexport const showDataOnMap = (data, caseTypes = \"cases\") =>\n  data.map((country, index) => (\n    <Circle\n      key={index}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[caseTypes].rgb}\n      fillColor={casesTypeColors[caseTypes].rgb}\n      radius={\n        Math.sqrt(country[caseTypes]) * casesTypeColors[caseTypes].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, caseTypes, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom} scrollWheelZoom={false}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"http://{s}.tile.osm.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, caseTypes)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport styles from \"./Table.module.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div>\n      <Typography variant=\"h6\">Live Cases By Country</Typography>\n\n      <div className={styles.tableContainer}>\n        <table>\n          <tbody>\n            {countries.map(({ country, cases }, index) => (\n              <tr key={index}>\n                <td>\n                  <Typography>{country}</Typography>\n                </td>\n                <td>\n                  <Typography>\n                    <strong>{numeral(cases).format(\"0,0\")}</strong>\n                  </Typography>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { Typography } from \"@material-ui/core\";\nimport { getHistoricalData } from \"../../api/index\";\nimport styles from \"./LineGraph.module.css\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          parser: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildLineChart = (data, caseTypes = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data[caseTypes]) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        x: date,\n        y: data[caseTypes][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[caseTypes][date];\n  }\n  return chartData;\n};\n\nconst LineGraph = ({ caseTypes }) => {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchHistoricalData = async () => {\n      const chartData = buildLineChart(await getHistoricalData(), caseTypes);\n      setData(chartData);\n    };\n    fetchHistoricalData();\n  }, [caseTypes]);\n\n  return (\n    <div className={styles.graphContainer}>\n      <Typography variant=\"h6\"> Worldwide New {caseTypes}</Typography>\n\n      {data.length > 0 ? (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204,16,52,0.5)\",\n                borderColor: \"#cc1034\",\n                data: data,\n              },\n            ],\n          }}\n        ></Line>\n      ) : (\n        \"null\"\n      )}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import numeral from \"numeral\";\nimport moment from \"moment\";\n\nexport const formatNumber = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const formatDate = (time) => moment(time).format(\"YYYY-MM-DD HH:mm:ss\");\n","import React, { useState, useEffect } from \"react\";\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n  Typography,\n} from \"@material-ui/core\";\nimport \"./App.css\";\nimport { getCountriesData, getCountryInfo } from \"./api/index\";\n\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport Table from \"./components/Table/Table\";\nimport LineGraph from \"./components/Graph/LineGraph\";\nimport { formatNumber, formatDate } from \"./format\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [caseTypes, setCaseTypes] = useState(\"cases\");\n  const [updateDate, setUpdateDate] = useState(\"\");\n\n  useEffect(() => {\n    const fetchCountryInfo = async () => {\n      let countryCode = \"worldwide\";\n      const response = await getCountryInfo(countryCode);\n      setCountryInfo(response);\n      setUpdateDate(response.updated);\n    };\n    fetchCountryInfo();\n  }, []);\n\n  useEffect(() => {\n    const fetchCountriesData = async () => {\n      setCountries(await getCountriesData());\n      const tableList = await getCountriesData();\n      const sortedList = tableList.sort((a, b) => {\n        return a.cases > b.cases ? -1 : 1;\n      });\n      setMapCountries(tableList);\n      setTableData(sortedList);\n    };\n    fetchCountriesData();\n  }, []);\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    getCountryInfo(countryCode).then((data) => {\n      setCountryInfo(data);\n      if (countryCode !== \"worldwide\") {\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      } else {\n        setMapCenter([34.80746, -40.4796]);\n        setMapZoom(2);\n      }\n    });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <div>\n            <Typography variant=\"h1\" className=\"app_title\">\n              COVID-19 TRACKER\n            </Typography>\n            <Typography className=\"app_updated\" color=\"textSecondary\">\n              Updated on: {formatDate(updateDate)}\n            </Typography>\n          </div>\n          <FormControl>\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((item, i) => (\n                <MenuItem key={i} value={item.value}>\n                  {item.country}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          <InfoBox\n            isBlue\n            onClick={(e) => setCaseTypes(\"cases\")}\n            active1={caseTypes === \"cases\"}\n            title=\"Coronavirus Cases\"\n            cases={formatNumber(countryInfo.todayCases)}\n            total={formatNumber(countryInfo.cases)}\n          ></InfoBox>\n          <InfoBox\n            isGreen\n            onClick={(e) => setCaseTypes(\"recovered\")}\n            title=\"Recovered\"\n            active2={caseTypes === \"recovered\"}\n            cases={formatNumber(countryInfo.todayRecovered)}\n            total={formatNumber(countryInfo.recovered)}\n          ></InfoBox>\n          <InfoBox\n            isRed\n            onClick={(e) => setCaseTypes(\"deaths\")}\n            active3={caseTypes === \"deaths\"}\n            title=\"Deaths\"\n            cases={formatNumber(countryInfo.todayDeaths)}\n            total={formatNumber(countryInfo.deaths)}\n          ></InfoBox>\n        </div>\n\n        <Map\n          caseTypes={caseTypes}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        ></Map>\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          <Table countries={tableData}></Table>\n          <LineGraph caseTypes={caseTypes}></LineGraph>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"Table_tableContainer__yjeW7\"};"],"sourceRoot":""}